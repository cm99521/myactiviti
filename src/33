

架构：分布式，技术角度优势，松耦合

分布式：
用Tomcat或Jetty等轻量级容器部署在多台物理或虚拟服务器。
用Nginx做多服务器负载均衡。Nginx以事件驱动的方式编写，有非常好的性能。Nginx支持热部署，它的启动特别容易, 并且几乎可以做到7*24不间断运行。当有
新的服务器被需要时，只需要简单的配置和热启动就可以扩展。

技术角度优势：
1. 流程引擎 activiti
  它在使用时极为方便，只是个 jar 文件，使用时仅需要将其放在类路径中，当然，Activiti 也可以作为独立服务器的方式使用；
  同时 Activiti 提供了很多 BPM 高级工具，其中还包括开发了协作工具，使得开发人员、业务人员和运维人员能够更好的协同工作
  Activiti 选择了 Apache 许可，一方面是希望 Activiti 能有更长久的生命力，因为它不受任何个人或是公司的控制而是属于整个社区，另一方面更是希望这个宽松的许可能够让 Activiti BPM 引擎和 BPMN2.0 国际标准被更广泛的采纳、使用和商业化

2. 数据库持久层 mybatis
  易于掌握，更容易进行sql的优化，可进行细粒度的优化
  
3. 数据库持久层 hibernate
   相比mybatis 有更高的开发效率，它可以做到自动生成数据库表结构，完全面向对象开发。可以用于一些非核心业务的快速开发实现。
   
4. Lucence
  Lucene是一个高性能、可伸缩的信息搜索(IR)库。它可以为你的应用程序添加索引和搜索能力。Lucene是用java实现的、成熟的开源项目
  程序员们不仅使用它构建具体的全文检索应用，而且将之集成到各种系统软件中去，apache软件基金会的网站使用了Lucene作为全文检索的引擎，IBM的商业软件Web Sphere中也采用了Lucene
  索引文件格式独立于应用平台，已经默认实现了一套强大的查询引擎，用户无需自己编写代码即可使系统可获得强大的查询能力，Lucene的查询实现中默认实现了布尔操作、模糊查询、分组查询等等

5. maven
   对第三方依赖库进行统一的版本管理
   可以保证所有项目的目录结构都是一样的，目录结构统一的好处就是，你要找源代码就去src/main/java/下，你要找需要放到classpath下的资源，就去src/main/resources/下，你要找单元测试对应的代码和资源，就去src/test/下。每个目录下放什么东西，程序编译，发布的时候，每个目录起什么作用都很清楚明了，不会出现打开项目找不到要找的文件的情况  
   Maven 可以自动为项目生成一个网站，里面包含了项目信息，参与人，项目管理相关的资源，第三方依赖库，使用的插件，以及通过其他扩展插件生成的各种报表。
   
6. gradle
   一个像Ant一样非常灵活的通用构建工具， 一种可切换的，像Maven一样基于约定的构建框架，约定优于配置
   gradle除了支持maven的约定外还允许自定义java或者resources目录
   
7. syslog
   syslog提供一种日志记录方法(RFC3164)，syslog本身是一个服务器，程序中凡是使用syslog记录的信息都会发送到该服务器，服务器根据配置决定此信息是否记录，是记录到磁盘文件还是其他地方，这样使系统内所有应用程序都能以统一的方式记录日志，为系统日志的统一审计提供了方便。

8. spring
  ioc 使得对组件的配置更为灵活，比如数据库组件可随意切换 oracle, sql server, mysql等
  aop 可灵活配置事务管理，保证义务的安全稳定
  mvc 业务控制与展现方式分离，灵活实现相同数据用不同的方式展现
  annotation 基于注释的代码编写，大大增加开发效率
  
  
松耦合：
各模块之间独立存在，比如流程模块，只负责流程的部署和运行。报表模块只负责产生报表。
当某个服务的内部结构和实现逐渐发生改变时，不影响其他服务。
各模块之间又可通过webservice或rest api等协议进行交互


功能：和itil比较，不是传统竖井

ITIL虽号称是IT服务管理流程的最佳实践，但并没有针对每一个流程落地提出实施步骤的具体指导。
用户在实施过程中，往往会遭遇一些具体问题时无从应对，缺乏参考
以往电话报障所存在的缺陷在于用户不能更清楚的描述问题和现象，用我们提供的保障平台，基于知识库和模糊搜索，用户可以很快的完成报障，还可以避免重复保障。
我们应该从ITIL流程为中心迈向以IT服务为核心，并通过自我优化的机制逐渐向以业务价值和用户体验为核心过渡